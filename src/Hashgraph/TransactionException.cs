using Hashgraph.Implementation;
using System;

namespace Hashgraph;

/// <summary>
/// Represents an error with a transaction that passed the gateway node 
/// pre-check and was processed by the network but did not succeed.
/// </summary>
public sealed class TransactionException : Exception
{
    /// <summary>
    /// The <see cref="ResponseCode"/> returned by the network.
    /// prior to transaction request expiration.
    /// </summary>
    public ResponseCode Status { get { return Receipt.Status; } }
    /// <summary>
    /// The Transaction ID generated by the library (or client code) 
    /// identifying the request.
    /// </summary>
    public TxId TxId { get { return Receipt.Id; } }
    /// <summary>
    /// The underlying receipt returned from the network that 
    /// caused the exception (or a simulated version if not enough 
    /// information has been returned from the network, such as
    /// a "receipt not found" error.)
    /// </summary>
    public TransactionReceipt Receipt { get; private set; }
    /// <summary>
    /// Internal constructor for cases where a NetworkResult exists.
    /// </summary>
    internal TransactionException(string message, NetworkResult result) : base(message)
    {
        Receipt = result.ToReceipt();
    }
    /// <summary>
    /// Internal constructor for cases where a NetworkResult has not
    /// yet been constructed, for example when the receipt can no
    /// longer be found.
    /// </summary>
    internal TransactionException(string message, Proto.TransactionID transactionId, Proto.ResponseCodeEnum responseCode) : base(message)
    {
        Receipt = new NetworkResult
        {
            TransactionID = transactionId,
            Receipt = new Proto.TransactionReceipt
            {
                Status = responseCode
            }
        }.ToReceipt();
    }
}