using Hashgraph.Implementation;
using System;

namespace Hashgraph;

/// <summary>
/// Represents the transaction id associated with a network request.  
/// This is generated by the library automatically for each request.  
/// <code>TxId</code> implements the equitable interface and can be 
/// compared to other transaction ids returned from the library.
/// </summary>
public sealed record TxId
{
    /// <summary>
    /// The address of the account paying the
    /// transaction processing fee.
    /// </summary>
    public Address Address { get; private init; }
    /// <summary>
    /// The number of whole seconds since the Epoch.
    /// </summary>
    public long ValidStartSeconds { get; private init; }
    /// <summary>
    /// The number of nanoseconds added to the 
    /// <see cref="ValidStartSeconds"/> value to 
    /// produce the total amount of time since the
    /// Epoch.
    /// </summary>
    /// <remarks>
    /// Unfortunately the native .net DateTime class
    /// does not represent time at the resolution of
    /// nano-seconds.  Therefore it is necessary to
    /// represent the date time in this manner.
    /// </remarks>
    public int ValidStartNanos { get; private init; }
    /// <summary>
    /// This transaction ID represents a pending or 
    /// "scheduled" transaction that may or may not have 
    /// been executed.  The flag shold be set to true 
    /// when interacting with pending transactions.
    /// </summary>
    public bool Pending { get; private init; }
    /// <summary>
    /// When non-zero, indicates that this transaction 
    /// is a child transaction spawned as a part of a 
    /// larger user-initiated transaction, such as an 
    /// implicit account creation (pay to alias) or side 
    /// affects of a contract method invocation.  It 
    /// will have the address and timestamp matching 
    /// the transaction that initiated the original 
    /// ledger state change.
    /// </summary>
    public int Nonce { get; private init; }
    /// <summary>
    /// Public constructor.
    /// </summary>
    /// <param name="address">
    /// The address of the account that is
    /// both associated with and pays the
    /// transaction fees for this transaction.
    /// </param>
    /// <param name="seconds">
    /// The total number of seconds elapsed
    /// since the Epoch.  Represents the 
    /// earliest point in time the network
    /// will consider the transaction valid.
    /// </param>
    /// <param name="nanos">
    /// The number of nanoseconds elapsed past
    /// the seconds portion of the time period
    /// identified in the seconds parameter.
    /// </param>
    /// <param name="pending">
    /// Flag indicating that this transaction ID
    /// represents a pending transaction and not 
    /// the transaction that scheduled it.  Useful
    /// retreiving receipts and records, but cannot
    /// be set to true for creating new transactions
    /// (via setting it in the context).
    /// </param>
    /// <param name="nonce">
    /// When non-zero, indicates that this transaction 
    /// is a child transaction spawned as a part of a 
    /// larger user-initiated transaction, such as an 
    /// implicit account creation (pay to alias) or side 
    /// affects of a contract method invocation.  It 
    /// will have the address and timestamp matching 
    /// the transaction that initiated the original 
    /// ledger state change.
    /// </param>
    public TxId(Address address, long seconds, int nanos, bool pending = false, int nonce = 0)
    {
        Address = address;
        ValidStartSeconds = seconds;
        ValidStartNanos = nanos;
        Pending = pending;
        Nonce = nonce;
    }
    /// <summary>
    /// Convenience constructor converting the
    /// entered <code>DateTime</code> object into
    /// the proper seconds and nanoseconds since the
    /// Epoch for use by the network.
    /// </summary>
    /// <param name="address">
    /// The address of the account that is
    /// both associated with and pays the
    /// transaction fees for this transaction.
    /// </param>
    /// <param name="dateTime">
    /// The date and time stamp for this transaction.
    /// Represents the earliest point in time the 
    /// network will consider the transaction valid.
    /// </param>
    /// <param name="pending">
    /// Flag indicating that this transaction ID
    /// represents a pending transaction and not 
    /// the transaction that scheduled it.  Useful
    /// retreiving receipts and records, but cannot
    /// be set to true for creating new transactions
    /// (via setting it in the context).
    /// </param>
    /// <param name="nonce">
    /// When non-zero, indicates that this transaction 
    /// is a child transaction spawned as a part of a 
    /// larger user-initiated transaction, such as an 
    /// implicit account creation (pay to alias) or side 
    /// affects of a contract method invocation.  It 
    /// will have the address and timestamp matching 
    /// the transaction that initiated the original 
    /// ledger state change.
    /// </param>
    public TxId(Address address, DateTime dateTime, bool pending = false, int nonce = 0)
    {
        Address = address;
        (ValidStartSeconds, ValidStartNanos) = Epoch.FromDate(dateTime);
        Pending = pending;
        Nonce = nonce;
    }
    /// <summary>
    /// A special designation of an transaction id that can't be created.
    /// It represents the absence of a transaction id.
    /// </summary>
    public static TxId None { get; } = new TxId();
    /// <summary>
    /// Internal Constructor representing the "None" 
    /// version of an transaction id.
    /// </summary>
    private TxId()
    {
        // Because we don't want to set
        // this property to nullable
        Address = Address.None;
    }
}